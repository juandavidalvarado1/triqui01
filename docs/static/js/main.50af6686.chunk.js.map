{"version":3,"sources":["index.js"],"names":["Square","value","onClick","className","Board","props","renderSquare","i","squares","FunctionalGame","useState","Array","fill","history","sethistory","stepNumber","setStepNumber","xIsNext","setxIsNext","Localhistory","current","winner","calculateWinner","moves","map","step","move","desc","jumpTo","status","slice","length","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"wLAKMA,EAAS,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,QAEpB,OACE,wBACAC,UAAU,SACVD,QAASA,EAFT,SAIGD,KAQHG,EAAQ,SAAAC,GAEZ,IAAMC,EAAe,SAACC,GACpB,OACA,cAAEP,EAAF,CACEC,MAAOI,EAAMG,QAAQD,GACrBL,QAAW,kBAAMG,EAAMH,QAAQK,OAKjC,OACE,gCACE,sBAAKJ,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,MAEhB,sBAAKH,UAAU,YAAf,UACGG,EAAa,GACbA,EAAa,GACbA,EAAa,UAwFhBG,EAAiB,SAAAJ,GAErB,MAA8BK,mBAAS,CAAC,CAACF,QAASG,MAAM,GAAGC,KAAK,SAAhE,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAA8BN,oBAAS,GAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAsBQC,EAAeN,EACfO,EAAUD,EAAaJ,GACvBM,EAASC,EAAgBF,EAAQZ,SAEjCe,EAAQJ,EAAaK,KAAI,SAACC,EAAMC,GACpC,IAAMC,EAAOD,EACX,eAAiBA,EACjB,mBACF,OACE,6BACE,wBAAQxB,QAAS,kBAhBV,SAACuB,GACdT,EAAcS,GACdP,EAAYO,EAAO,IAAO,GAcGG,CAAOF,IAA9B,SAAsCC,KAD/BD,MAMTG,EAAS,GAOb,OALEA,EADCR,EACM,WAAYA,EAGV,iBAAiBJ,EAAU,IAAI,KAGxC,sBAAKd,UAAU,OAAf,UACE,qBAAKA,UAAU,aAAf,SACE,cAACC,EAAD,CACAI,QAASY,EAAQZ,QACjBN,QA/CY,SAACK,GACnB,IAAMY,EAAeN,EAAQiB,MAAM,EAAGf,EAAY,GAE5CP,EADUW,EAAaA,EAAaY,OAAO,GACzBvB,QAAQsB,QAE7BR,EAAgBd,IAAUA,EAAQD,KAGrCC,EAAQD,GAAGU,EAAU,IAAI,IACzBH,EAAW,GAAD,mBAAKK,GAAL,CAAmB,CAAEX,cAC/BQ,EAAcG,EAAaY,QAC3Bb,GAAYD,SAsCR,sBAAKd,UAAU,YAAf,UACE,8BAAO0B,IACP,6BAAKN,WAcjB,SAASD,EAAgBd,GAWvB,IAVA,IAAMwB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAzB,EAAI,EAAGA,EAAIyB,EAAMD,OAAQxB,IAAK,CACrC,kBAAkByB,EAAMzB,GAAxB,GAAO0B,EAAP,KAAUC,EAAV,KAAaC,EAAb,KACA,GAAI3B,EAAQyB,IAAMzB,EAAQyB,KAAOzB,EAAQ0B,IAAM1B,EAAQyB,KAAOzB,EAAQ2B,GACpE,OAAO3B,EAAQyB,GAGnB,OAAO,KAtBTG,IAASC,OACP,cAAC5B,EAAD,IACA6B,SAASC,eAAe,W","file":"static/js/main.50af6686.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\n\nconst Square = ({value, onClick}) => {\n  \n    return (\n      <button \n      className=\"square\" \n      onClick={onClick}\n      >\n        {value}\n      </button>\n    );\n  \n}\n\n\n\nconst Board = props => {\n\n  const renderSquare = (i) => {\n    return (\n    < Square \n      value={props.squares[i]}\n      onClick = {() => props.onClick(i)}\n      />\n    );\n  }\n \n    return (\n      <div>\n        <div className=\"board-row\">\n          {renderSquare(0)}\n          {renderSquare(1)}\n          {renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(3)}\n          {renderSquare(4)}\n          {renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {renderSquare(6)}\n          {renderSquare(7)}\n          {renderSquare(8)}\n        </div>\n      </div>\n    );\n  \n}\n\n// class Game extends React.Component {\n//   constructor(props){\n//     super(props)\n//     this.state = {\n//       history:[{\n//         squares: Array(9).fill(null),\n//       }],\n//       stepNumber:0,\n//       xIsNext: true,\n      \n \n//     };\n//   }\n\n//   handleClick(i){\n//     const history=this.state.history.slice(0,this.state.stepNumber +1);\n//     const current=history[history.length-1];\n//     const squares=current.squares.slice();\n//    // const localsquares = this.state.squares.slice();\n//     if(calculateWinner(squares)||squares[i]){\n//       return;\n//     }\n//     squares[i]=this.state.xIsNext ? 'x':'o';\n//     this.setState({\n//       history:history.concat([{\n//         squares : squares,\n//       }]),\n//       stepNumber: history.length,\n//       xIsNext: !this.state.xIsNext,\n\n//     }); \n//   }\n\n//   jumpTo(step){\n//     this.setState({\n//       stepNumber:step,\n//       xIsNext:(step % 2) === 0,\n\n//     });\n\n//   }\n\n//   render() {\n//     const history = this.state.history;\n//     const current = history[this.state.stepNumber]\n//     const winner = calculateWinner(current.squares);\n\n//     const moves = history.map((step, move) => {\n//       const desc = move ?\n//         'Go to move #' + move :\n//         'Go to game start';\n//       return (\n//         <li key={move}>\n//           <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//         </li>\n//       );\n//     });\n\n//     let status;\n//     if(winner){\n//       status='Winner: '+ winner;\n//     }\n//     else{\n//       status = 'Next player: '+(this.state.xIsNext ? 'x':'o');\n//     }\n//     return (\n//       <div className=\"game\">\n//         <div className=\"game-board\">\n//           <Board\n//           squares={current.squares} \n//           onClick={(i) => this.handleClick(i)}/>\n//         </div>\n//         <div className=\"game-info\">\n//           <div>{ status }</div>\n//           <ol>{moves}</ol>\n//         </div>\n//       </div>\n//     );\n//   }\n//   }\n\n  const FunctionalGame = props => {\n\n    const [history, sethistory] = useState([{squares: Array(9).fill(null)}]);\n    const [stepNumber, setStepNumber] = useState(0);\n    const [xIsNext, setxIsNext] = useState(true);\n\n    const handleClick = (i) =>{\n      const Localhistory = history.slice(0, stepNumber +1);\n      const current = Localhistory[Localhistory.length-1];\n      const squares = current.squares.slice();\n     // const localsquares = this.state.squares.slice();\n      if(calculateWinner(squares)||squares[i]){\n        return;\n      }\n      squares[i]=xIsNext ? 'x':'o';\n      sethistory([...Localhistory, { squares }]);\n      setStepNumber(Localhistory.length);\n      setxIsNext(!xIsNext);\n    }\n  \n    const jumpTo = (step) =>{\n      setStepNumber(step);\n      setxIsNext((step % 2) === 0);  \n    }\n  \n  \n      const Localhistory = history;\n      const current = Localhistory[stepNumber]\n      const winner = calculateWinner(current.squares);\n  \n      const moves = Localhistory.map((step, move) => {\n        const desc = move ?\n          'Go to move #' + move :\n          'Go to game start';\n        return (\n          <li key={move}>\n            <button onClick={() => jumpTo(move)}>{desc}</button>\n          </li>\n        );\n      });\n  \n      let status = '';\n      if(winner){\n        status='Winner: '+ winner;\n      }\n      else{\n        status = 'Next player: '+(xIsNext ? 'x':'o');\n      }\n      return (\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n            squares={current.squares} \n            onClick={handleClick}/>\n          </div>\n          <div className=\"game-info\">\n            <div>{ status }</div>\n            <ol>{moves}</ol>\n          </div>\n        </div>\n      );\n    \n    }\n\n// ========================================\n\nReactDOM.render(\n  <FunctionalGame />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}